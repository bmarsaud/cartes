---
import Tabs from "../../components/Tabs.astro";
const map = {
    "title": "Couleurs des boîtes aux lettres",
    "abstract": "",
    "description": "",
    "date": "2025-05-22"
};

import MapLayout from "../../layouts/MapLayout.astro";
---
<MapLayout {...map}>
    <div class="lg:w-1/3 border lg:border-0 lg:border-r flex flex-col p-2 pr-1 gap-4">
        <h2>Répartition</h2>
    </div>
    <div id="map" class="h-[60vh] lg:h-full lg:w-2/3 relative border lg:border-none">
        <div id="tooltip" class="absolute left-0 top-0 z-20 bg-[#fffaea] border p-2 pointer-events-none max-w-sm" style="display: none;">
            <h3 class="font-[600] border-b mb-1" id="feature-name"></h3>
            <span class="italic" id="traduction"></span>
            <div class="flex gap-2 items-center">
                <div class="w-4 h-4 border" id="color"></div> <span id="color-name"></span>
            </div>
            <img src="" id="image" />
            <p class="text-sm" id="attribution"></p>
        </div>
    </div>
</MapLayout>

<script>
    import 'ol/ol.css';
    import {default as OlMap} from 'ol/Map';
    import View from 'ol/View';
    import VectorLayer from 'ol/layer/Vector';
    import VectorSource from 'ol/source/Vector';
    import GeoJSON from 'ol/format/GeoJSON';
    import proj4 from 'proj4';
    import {register} from 'ol/proj/proj4';
    import {Fill, Stroke, Style} from "ol/style";
    import Feature from "ol/Feature";

    proj4.defs("EPSG:54030","+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs");
    register(proj4);

    var state = {
        hoveredFeature: null as (Feature | null)
    };

    loadMap();
    async function loadMap() {
        // data
        let data = await fetch('/data/couleurs-boites-aux-lettres/colors.json').then(res => res.json());
        let countriesData = new Map<string, any>();
        for (let entry of data) {
            countriesData.set(entry['alpha-3'], entry);
        }

        const countriesSource = new VectorSource({
            url: 'https://raw.githubusercontent.com/johan/world.geo.json/refs/heads/master/countries.geo.json',
            format: new GeoJSON(),
        });

        // colors
        function getFeatureStyle (feature: Feature, resolution?: number) {
            let country: string = feature.getId() as string;
            return new Style({
                stroke: new Stroke(),
                fill: new Fill({
                    color: countriesData.has(country) && !!countriesData.get(country).color ? countriesData.get(country).color : '#ffffff',
                })
            })
        }

        const countriesLayers = new VectorLayer({
            source: countriesSource,
            style: getFeatureStyle
        });

        const map = new OlMap({
            target: 'map',
            layers: [
                countriesLayers
            ],
            view: new View({
                projection: 'EPSG:54030',
                center: [0, 0],
                zoom: 0,
            }),
        });

        countriesSource.on('featuresloadend', function() {
            map.getView().fit(countriesSource.getExtent());
        });

        // map hover
        let tooltipElem = document.getElementById('tooltip');
        let featureNameElem = document.getElementById('feature-name');
        let traductionElement = document.getElementById('traduction');
        let colorElem = document.getElementById('color');
        let colorNameElem = document.getElementById('color-name');
        let imageElem = document.getElementById('image');
        let attributionElem = document.getElementById('attribution');
        map.on('pointermove', function (evt) {
            countriesLayers.getFeatures(evt.pixel).then((features) => {
                let feature = features.pop();
                if (state.hoveredFeature) {
                    state.hoveredFeature.setStyle(undefined);
                    state.hoveredFeature = null;
                }

                if (feature) {
                    state.hoveredFeature = feature;

                    let featureStyle: Style = getFeatureStyle(feature);
                    featureStyle.getStroke().setWidth(2);
                    feature.setStyle(featureStyle.clone());
                }
            });

            if (state.hoveredFeature) {
                tooltipElem.style.left = evt.pixel[0] + 10 + 'px';
                tooltipElem.style.top = evt.pixel[1] + 10 + 'px';
                tooltipElem.style.display = 'block';


                let countryData = countriesData.get(state.hoveredFeature.getId() as string);
                featureNameElem.innerText = countryData.name;
                colorElem.style = 'background-color: ' + countryData.color;
                colorNameElem.innerText = countryData.color_name;
                traductionElement.innerText = countryData.traduction;
                imageElem.setAttribute('src', countryData.image);
                attributionElem.innerHTML = countryData.attribution;

                if (!countryData.color) {
                    colorElem.style = 'display: none';
                    traductionElement.innerText = 'Aucune donnée disponible.'
                }
            } else {
                tooltipElem.style.display = 'none';
            }
        });
    }
</script>
