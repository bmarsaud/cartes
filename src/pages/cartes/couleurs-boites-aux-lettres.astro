---
const map = {
    "title": "La couleur des boîtes aux lettres",
    "abstract": "En France, les boîtes aux lettres publiques sont facilement reconnaissables à leur caractéristique couleur jaune, mais cette couleur est loin d'être universelle et diffère selon les pays.",
    "description": "En France, on associe les services postaux à la couleur jaune, portée notamment par les très reconnaissables boîtes aux lettres publiques, mais ce n'est pas forcément le cas dans les autres pays du monde. Chaque pays définit sa propre couleur et sa propre forme, ce qui apporte une grande diversité : rouge, bleu, vert, rectangulaire, cylindrique, avec ou sans insigne, il y en a pour tous les goûts !",
    "date": "2025-05-22"
};

import MapLayout from "../../layouts/MapLayout.astro";
---
<MapLayout {...map}>
    <div class="lg:w-1/3 border lg:border-0 lg:border-r flex flex-col p-2 pr-1 gap-4">
        <h2 class="text-xl font-bold">Répartition par couleur</h2>
        <div class="flex flex-col gap-2 overflow-y-hidden" x-data="{
            elements: [],
            total: 0,
            coef: 1,
            selectedIndex: 0,
            updateData: function (data) {
                this.elements = data.elements.sort((a, b) => b.value - a.value);
                this.total = data.elements.reduce((a, b) => a + b.value, 0);
                this.coef = 1.5 * Math.max(...data.elements.map(elem => elem.value));
            },
            selectColor: function (index) {
                this.selectedIndex = index;
                $refs.countriesContainer.scroll(0, 0);
            }
        }" @update-data.window="updateData($event.detail)">
            <template x-for="(element, index) in elements">
                <div class="flex gap-2 items-center">
                    <div class="w-1/5 text-right" x-text="element.label"></div>
                    <div class="w-4/5 flex gap-2 items-center">
                        <div class="border h-5 cursor-pointer hover:border-2" :style="'width: ' + (element.value / coef * 100).toFixed(0) +'%; background-color: ' + element.color + ';'" :class="{ 'border-2': selectedIndex === index }" @click="selectColor(index)"></div>
                        <span x-text="(element.value / total * 100).toFixed(0) + ' %'"></span>
                    </div>
                </div>
            </template>
            <template x-if="elements.length > 0">
                <div class="grid grid-cols-2 sm:grid-cols-3 gap-2 overflow-y-scroll mt-4 pr-1 custom-scrollbar " x-ref="countriesContainer">
                    <template x-for="country in elements[selectedIndex].countries">
                        <div class="p-2 border flex flex-col justify-between">
                            <div class="flex items-center gap-1.5 border-b mb-1">
                                <div class="border w-3 h-3" :style="'background-color: ' + country.color + ';'"></div>
                                <span x-text="country.name" class="text-sm font-semibold"></span>
                            </div>
                            <div class="flex-grow flex flex-col justify-between">
                                <img :src="country.image" />
                                <p class="text-[10px]" x-html=`country.attribution`></p>
                            </div>
                        </div>
                    </template>
                </div>
            </template>
        </div>
    </div>
    <div id="map" class="h-[60vh] lg:h-full lg:w-2/3 relative border lg:border-none">
        <div id="tooltip" class="absolute left-0 top-0 z-20 bg-[#fffaea] border p-2 md:pointer-events-none w-[97%] md:w-auto md:max-w-sm" style="display: none;">
            <div class="border-b mb-1 flex justify-between items-center" x-data="{}">
                <h3 class="font-[600]" id="feature-name"></h3>
                <div class="w-5 h-5 bg-black hover flex justify-center items-center md:hidden" @click="document.getElementById('tooltip').style = 'display: none;'">
                    <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M5.29289 5.29289C5.68342 4.90237 6.31658 4.90237 6.70711 5.29289L12 10.5858L17.2929 5.29289C17.6834 4.90237 18.3166 4.90237 18.7071 5.29289C19.0976 5.68342 19.0976 6.31658 18.7071 6.70711L13.4142 12L18.7071 17.2929C19.0976 17.6834 19.0976 18.3166 18.7071 18.7071C18.3166 19.0976 17.6834 19.0976 17.2929 18.7071L12 13.4142L6.70711 18.7071C6.31658 19.0976 5.68342 19.0976 5.29289 18.7071C4.90237 18.3166 4.90237 17.6834 5.29289 17.2929L10.5858 12L5.29289 6.70711C4.90237 6.31658 4.90237 5.68342 5.29289 5.29289Z" fill="white"/>
                    </svg>
                </div>
            </div>
            <span class="italic" id="traduction"></span>
            <div class="flex gap-2 items-center">
                <div class="w-4 h-4 border" id="color"></div> <span id="color-name"></span>
            </div>
            <img src="" id="image" />
            <p class="text-sm" id="attribution"></p>
        </div>
    </div>
</MapLayout>

<script>
    import 'ol/ol.css';
    import {default as OlMap} from 'ol/Map';
    import View from 'ol/View';
    import VectorLayer from 'ol/layer/Vector';
    import VectorSource from 'ol/source/Vector';
    import GeoJSON from 'ol/format/GeoJSON';
    import proj4 from 'proj4';
    import {register} from 'ol/proj/proj4';
    import {Fill, Stroke, Style} from "ol/style";
    import Feature from "ol/Feature";

    proj4.defs("EPSG:54030","+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs");
    register(proj4);

    var state = {
        hoveredFeature: null as (Feature | null)
    };

    loadMap();
    async function loadMap() {
        // data
        let data = await fetch('/data/couleurs-boites-aux-lettres/colors.json').then(res => res.json());
        let countriesData = new Map<string, any>();
        let chartData = new Map<string, { label: string, color: string, value: number, countries: any[] }>();
        for (let entry of data) {
            countriesData.set(entry['alpha-3'], entry);

            // data transformations
            if (entry.image.includes('https://upload.wikimedia.org')) {
                let parts = entry.image.split('/');
                entry.image = entry.image.replace('/commons/', '/commons/thumb/') + '/256px-' + parts[parts.length - 1];
            }
            entry.attribution = entry.attribution.replace('<a', '<a class="underline" target="_blank"');

            // group by color
            if (entry.color_name) {
                if (!chartData.has(entry.color_name)) {
                    chartData.set(entry.color_name, {
                        label: entry.color_name,
                        color: entry.color,
                        value: 0,
                        countries: []
                    });
                }
                chartData.get(entry.color_name).value += 1;
                chartData.get(entry.color_name).countries.push(entry);
            }
        }
        window.dispatchEvent(new CustomEvent('update-data', {
            detail: {
                elements: Array.of(...chartData.values())
            }
        }));

        const countriesSource = new VectorSource({
            url: 'https://raw.githubusercontent.com/johan/world.geo.json/refs/heads/master/countries.geo.json',
            format: new GeoJSON(),
        });

        // colors
        function getFeatureStyle (feature: Feature, resolution?: number) {
            let country: string = feature.getId() as string;
            return new Style({
                stroke: new Stroke(),
                fill: new Fill({
                    color: countriesData.has(country) && !!countriesData.get(country).color ? countriesData.get(country).color : '#ffffff',
                })
            })
        }

        const countriesLayers = new VectorLayer({
            source: countriesSource,
            style: getFeatureStyle
        });

        const map = new OlMap({
            target: 'map',
            layers: [
                countriesLayers
            ],
            view: new View({
                projection: 'EPSG:54030',
                center: [0, 0],
                zoom: 0,
            }),
        });

        countriesSource.on('featuresloadend', function() {
            map.getView().fit(countriesSource.getExtent());
        });

        // map hover
        let tooltipElem = document.getElementById('tooltip');
        let featureNameElem = document.getElementById('feature-name');
        let traductionElement = document.getElementById('traduction');
        let colorElem = document.getElementById('color');
        let colorNameElem = document.getElementById('color-name');
        let imageElem = document.getElementById('image');
        let attributionElem = document.getElementById('attribution');
        let mapElement = document.getElementById('map');

        map.on('pointermove', function (evt) {
            if (evt.dragging) {
                return;
            }
            updateTooltip(evt);
        });

        map.on('click', function (evt) {
            updateTooltip(evt);
        });

        function updateTooltip(evt) {
            countriesLayers.getFeatures(evt.pixel).then((features) => {
                let feature = features.pop();
                if (state.hoveredFeature) {
                    state.hoveredFeature.setStyle(undefined);
                    state.hoveredFeature = null;
                }

                if (feature) {
                    state.hoveredFeature = feature;

                    let featureStyle: Style = getFeatureStyle(feature);
                    featureStyle.getStroke().setWidth(2);
                    feature.setStyle(featureStyle.clone());

                    if (getCurrentBreakpoint() === 'xs') {
                        tooltipElem.style.top = '5px';
                        tooltipElem.style.left = '5px';
                    } else {
                        if (evt.pixel[0] + 288 < mapElement.clientWidth) {
                            tooltipElem.style.left = evt.pixel[0] + 10 + 'px';
                        } else {
                            tooltipElem.style.left = evt.pixel[0] - 288 - 10 + 'px';
                        }

                        if (evt.pixel[1] + 288 < mapElement.clientHeight) {
                            tooltipElem.style.top = evt.pixel[1] + 10 + 'px';
                        } else {
                            tooltipElem.style.top = evt.pixel[1] - 288 - 10 + 'px';
                        }
                    }

                    tooltipElem.style.display = 'block';

                    let countryData = countriesData.get(state.hoveredFeature.getId() as string);
                    featureNameElem.innerText = countryData.name;
                    colorElem.style = 'background-color: ' + countryData.color;
                    colorNameElem.innerText = countryData.color_name;
                    traductionElement.innerText = countryData.traduction;
                    imageElem.setAttribute('src', countryData.image);
                    attributionElem.innerHTML = countryData.attribution;

                    if (!countryData.color) {
                        colorElem.style = 'display: none';
                        traductionElement.innerText = 'Aucune donnée disponible.'
                    }
                }
            });

            if (!state.hoveredFeature) {
                tooltipElem.style.display = 'none';
            }
        }
    }

    const breakpoints = {
        xs: '(max-width: 639px)',
        sm: '(min-width: 640px) and (max-width: 767px)',
        md: '(min-width: 768px) and (max-width: 1023px)',
        lg: '(min-width: 1024px) and (max-width: 1279px)',
        xl: '(min-width: 1280px)'
    };

    function getCurrentBreakpoint() {
        for (const [breakpoint, query] of Object.entries(breakpoints)) {
            if (window.matchMedia(query).matches) {
                return breakpoint;
            }
        }
    }
</script>
