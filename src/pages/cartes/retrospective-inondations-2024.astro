---
import Tabs from "../../components/Tabs.astro";
const map = {
    "title": "Rétrospectives des inondations en Europe de l'année 2024",
    "abstract": "A l'occasion de la publication du rapport sur l'état du climat européen de l'observatoire Copernicus, revenons sur la série d'inondations qui ont marqué l'Europe en 2024.",
    "description": "Le mardi 15 avril 2025, l'observatoire Copernicus publie son <a href='https://climate.copernicus.eu/esotc/2024' target='_blank' class='underline'>rapport sur l'état du climat européen</a>, revenant sur l'année 2024. L'Europe a subie de plein fouet les conséquences du réchauffement climatique en cette année la plus chaude jamais enregistrée avec de nombreux phénomènes extrèmes : vagues de chaleur record et inondations meurtrières. ",
    "date": "2025-04-23"
};

import MapLayout from "../../layouts/MapLayout.astro";
import events from '../../../public/data/retrospective-inondations-2024/events.json';
---
<MapLayout {...map}>
    <div class="lg:w-1/4 border lg:border-0 lg:border-r flex flex-col p-2 pr-1">
        <h2 class="text-2xl font-bold">Événements</h2>
        <div class="flex flex-col gap-1 overflow-y-auto custom-scrollbar pr-1" @select-event-on-map.window="toggleEvent($event.detail.index)" x-data="{
            selectedEvent: null,
            toggleEvent: function (index, elem) {
                if (this.selectedEvent === index) {
                    this.selectedEvent = null;
                } else {
                    this.selectedEvent = index;
                    window.selectEvent(index);
                }
            }
        }">
            { events.map((event, index) => (
                <>
                    { event.event && (index === 0 || events[index - 1].event !== event.event) && <h3 class="text-lg font-semibold underline">{event.event}</h3> }
                    <div class="border border-black hover:text-white hover:bg-black group flooding-event" :class=`{ 'text-white bg-black': selectedEvent === ${index} }` style={ events[index + 1]?.event !== event.event ? 'margin-bottom: 1em' : '' }>
                        <div class="p-2 cursor-pointer" @click={`toggleEvent(${index}, $event.target)`}>
                            <div class="flex justify-between gap-1">
                                <h3 class="font-semibold">{ event.name }</h3>
                                <div>
                                    <span class="text-sm px-1 text-white bg-black group-hover:text-black group-hover:bg-white" :class=`{ 'text-black bg-white': selectedEvent === ${index}, 'text-white': selectedEvent !== ${index} }`>{ new Date(event.date).toLocaleDateString() }</span><br />
                                </div>
                            </div>
                            <div>
                                { event.death ? <span class="text-sm">&bull; { event.death } mort{ event.death > 1 ? 's' : '' }</span> : <></> }
                                { event.evacuated ? <span class="text-sm">&bull; { event.evacuated } évacués</span> : <></> }
                                { event.homes ? <span class="text-sm">&bull; { event.homes } bâtiments touchés</span> : <></> }
                            </div>
                        </div>
                        <div class="p-2 border-t text-black bg-[#fffaea] text-sm hidden" :class=`{ 'hidden': selectedEvent !== ${index} }` set:html={ event.text }></div>
                    </div>
                </>
            )) }
        </div>
    </div>
    <div id="map" class="h-[60vh] lg:h-full lg:w-3/4 relative border lg:border-none">
        <div class="absolute top-2 right-2 z-20 bg-[#fffaea] border p-2" x-data="{}" @tab-selected="window.selectIndicator($event.detail.value)">
            <h3 class="font-semibold">Indicateur</h3>
            <Tabs elements={["Morts", "Déplacés", "Bâtiments"]} initialValue="Morts"></Tabs>
        </div>
        <div class="absolute bottom-2 right-2 z-20 bg-[#fffaea] border p-2 text-sm">
            <span class="font-semibold">Sources</span> : <a href="https://european-flood.emergency.copernicus.eu/en/search/node?keys=EFAS+Bulletin+2024" target="_blank" class="underline">EFAS Bulletins</a>, <span class="italic">Richard Davies</span> @ <a href="https://floodlist.com/" target="_blank" class="underline">Floodlist</a>
        </div>
    </div>
</MapLayout>

<script>
    import 'ol/ol.css';
    import Map from 'ol/Map';
    import View from 'ol/View';
    import VectorLayer from 'ol/layer/Vector';
    import VectorSource from 'ol/source/Vector';
    import GeoJSON from 'ol/format/GeoJSON';
    import proj4 from 'proj4';
    import {register} from 'ol/proj/proj4';
    import {Fill, Stroke, Style, Circle, Text} from "ol/style";

    proj4.defs("EPSG:54030","+proj=robin +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs");
    register(proj4);


    loadMap();
    async function loadMap() {
        // data
        const events = await fetch('/data/retrospective-inondations-2024/events.json').then(res => res.json());
        const eventsSource = new VectorSource({
            features: new GeoJSON().readFeatures({
                type: "FeatureCollection",
                features: events.map((event: any, index: number) => ({
                    type: "Feature",
                    id: index,
                    properties: {
                        name: event.name,
                        death: event.death,
                        evacuated: event.evacuated,
                        homes: event.homes
                    },
                    geometry: event.geometry
                }))
            }, {
                dataProjection: 'EPSG:4326',
                featureProjection: 'EPSG:54030'
            }),
        })

        const countriesSource = new VectorSource({
            url: 'https://raw.githubusercontent.com/leakyMirror/map-of-europe/refs/heads/master/GeoJSON/europe.geojson',
            format: new GeoJSON(),
        });

        // style
        let currentIndicator = 'death';
        const indicatorMap = {
            'death': (value: number) => value == 0 ? 5 : (value / 200 * 50) + 10,
            'evacuated': (value: number) => value == 0 ? 5 : (value / 20000 * 50) + 10,
            'homes': (value: number) => value == 0 ? 5 : (value / 70000 * 70) + 10
        };
        const indicatorTextScale = {
            'death': 15,
            'evacuated': 24,
            'homes': 25
        };

        let selectedEvent: number | null = null;
        const frenchNumberFormat = new Intl.NumberFormat('fr-FR');
        function getFeatureStyle (feature) {
            let rawValue = feature.get(currentIndicator);
            let value = indicatorMap[currentIndicator](rawValue);
            let textValue = value / indicatorTextScale[currentIndicator];
            return new Style({
                image: new Circle({
                    radius: value,
                    fill: new Fill({
                        color: selectedEvent === feature.getId() ? '#0b4897' : "#0d2d55"
                    }),
                    stroke: new Stroke({
                        color: 'black',
                        width: selectedEvent === feature.getId() ? 4 : 1
                    })
                }),
                text: new Text({
                    font: textValue + 'em "Source Serif 4"',
                    text: feature.get(currentIndicator) > 0 ? frenchNumberFormat.format(rawValue) : null,
                    fill: new Fill({
                        color: 'white'
                    })
                })
            });
        }

        const eventsLayer = new VectorLayer({
            source: eventsSource,
            style: getFeatureStyle,
        });

        const map = new Map({
            target: 'map',
            layers: [
                new VectorLayer({
                    source: countriesSource,
                    style: {
                        "stroke-color": "black",
                        "fill-color": "#eee"
                    }
                }),
                eventsLayer
            ],
            view: new View({
                projection: 'EPSG:54030',
                center: [881240.1853814595, 5016383.577103197],
                zoom: 5.5,
            }),
        });

        // right panel event selection
        window.selectEvent = function (index: number) {
            // timeout to wait for description to show before scrolling
            setTimeout(() => {
                document.querySelectorAll('.flooding-event')[index].scrollIntoView();
            }, 10);

            if (selectedEvent) {
                // setStyle tags features as changed so no need to call it
                eventsSource.getFeatureById(selectedEvent)?.setStyle();
            }

            selectedEvent = index;
            eventsSource.getFeatureById(selectedEvent)?.setStyle();
        }

        // indicator selection
        window.selectIndicator = function (indicator: string) {
            if (indicator === 'Morts') {
                currentIndicator = 'death';
            } else if (indicator === 'Déplacés') {
                currentIndicator = 'evacuated';
            } else if (indicator === 'Bâtiments') {
                currentIndicator = 'homes';
            }
            eventsSource.changed();
        }

        // map hover
        let hoveredEvent: any = null;
        map.on('pointermove', function (evt) {
            eventsLayer.getFeatures(evt.pixel).then((features) => {
                let feature = features.pop();
                if (hoveredEvent) {
                    map.getTargetElement().style.cursor = 'auto';
                    hoveredEvent.setStyle(undefined);
                    hoveredEvent = null;
                }

                if (feature) {
                    map.getTargetElement().style.cursor = 'pointer';
                    hoveredEvent = feature;

                    let featureStyle: Style = getFeatureStyle(feature);
                    featureStyle.getImage()?.getStroke().setWidth(4);
                    feature.setStyle(featureStyle.clone());
                }
            });
        });

        map.on('click', function (evt) {
            eventsLayer.getFeatures(evt.pixel).then((features) => {
                let feature = features.pop();
                if (feature) {
                    selectedEvent = feature.getId() as number;
                    window.dispatchEvent(new CustomEvent('select-event-on-map', {
                        detail: {
                            index: selectedEvent
                        }
                    }));
                }
            });
        });
    }
</script>
