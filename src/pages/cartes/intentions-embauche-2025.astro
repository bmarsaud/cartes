---
import Tabs from "../../components/Tabs.astro";
const map = {
    "title": "Les intentions d'embauche en 2025",
    "abstract": "Dans son enquête Besoins en Main-d'Œuvre 2025, France Travail annonce une diminution de 12,5 % du nombre de projets d'embauche par rapport à 2025. Une phénomène général mais inégal sur le territoire.",
    "description": "Chaque année, France Travail publie son enquête <a href=\"https://statistiques.francetravail.org/bmo/\" target=\"_blank\" class=\"underline\">Besoins en Main-d'Œuvre</a> qui recense les besoins en recrutement des entreprises française. En 2025, on observe un baisse du nombre de projet de recrutement de 12,5 % par rapport à 2024 qui s'explique notamment par la baisse de 4,1 points de la proportion d'établissements prévoyant d'embaucher.",
    "date": "30 avril 2025"
};

import MapLayout from "../../layouts/MapLayout.astro";
---
<MapLayout {...map}>
    <div class="w-1/3 border-r flex flex-col p-2 pr-1 gap-4">
        <div class="flex flex-col gap-1" x-data="{
            numberFormat: new Intl.NumberFormat('fr-FR'),
            title: 'France métropolitaine',
            geolocation: 'A l\\'échelle nationale',
            direction: 'baissé',
            evolution: '12.5 %',
            projets2024: '2 401 105',
            projets2025: '2 751 069',
            updateData: function(event) {
                this.title = event.title;
                this.geolocation = event.geolocation;
                this.direction = event.evolution > 0 ? 'augmenté' : 'baissé';
                this.evolution = (Math.abs(event.evolution) * 100).toFixed(2) + ' %';
                this.projets2024 = this.numberFormat.format(event.projets2024);
                this.projets2025 = this.numberFormat.format(event.projets2025);
            }
        }" @update-data.window="updateData($event.detail)">
            <div class="flex gap-2 items-center">
                <template x-if="title !== 'France métropolitaine'">
                    <div class="stroke-white bg-black border hover:stroke-black hover:bg-transparent cursor-pointer" @click="window.goBack()">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-left-icon lucide-chevron-left"><path d="m15 18-6-6 6-6"/></svg>
                    </div>
                </template>
                <h2 class="text-2xl font-bold" x-text="title"></h2>
            </div>
            <p><span x-text="geolocation"></span> les intentions d'embauche ont <span x-text="direction"></span> de <span class="font-semibold" x-text="evolution"></span> par rapport à 2024 selon l'enquête <a href="https://statistiques.francetravail.org/bmo/" target="_blank" class="underline">Besoins en Main-d'Œuvre</a> de France Travail.</p>
            <p class="mt-1">Cela représente un total de <span x-text="projets2025" class="font-semibold"></span> projets d'embauche en 2025 contre <span x-text="projets2024"  class="font-semibold"></span> en 2024.</p>
            <p>La répartition des métiers recherchés par les projets d'embauche est la suivante :</p>
            <canvas class="w-full mt-2" id="metier-chart"></canvas>
        </div>
    </div>
    <div id="map" class="h-full w-3/4 relative">
        <div id="tooltip" class="absolute left-0 top-0 z-20 bg-[#fffaea] border p-2 pointer-events-none" style="display: none;">
            <h3 class="font-[600] border-b mb-1" id="feature-name">Name</h3>
            <span id="project-amount"></span> projets d'embauche.
        </div>
        <div class="absolute top-2 right-2 z-20 bg-[#fffaea] border p-2" x-data="{}" @tab-selected="window.selectIndicator($event.detail.value)">
            <h3 class="font-semibold">Indicateur</h3>
            <Tabs elements={["Évolution p/r à 2024", "Nombre de projets"]} initialValue="Évolution p/r à 2024"></Tabs>
        </div>
        <div class="absolute bottom-2 right-2 z-20 bg-[#fffaea] border p-2 text-xs">
            <div>
                <a href="https://france-geojson.gregoiredavid.fr/" target="_blank" class="underline">France GeoJSON</a>, <span class="italic">Grégoire David</span>
            </div>
            <div>
                <a href="https://statistiques.francetravail.org/bmo" target="_blank" class="underline">Enquête Besoins en Main d'Oeuvre (BMO)</a>, <span class="italic">France Travail</span>
            </div>
        </div>
    </div>
</MapLayout>

<script>
    import 'ol/ol.css';
    import Map from 'ol/Map';
    import View from 'ol/View';
    import VectorLayer from 'ol/layer/Vector';
    import VectorSource from 'ol/source/Vector';
    import GeoJSON from 'ol/format/GeoJSON';
    import proj4 from 'proj4';
    import {register} from 'ol/proj/proj4';
    import {Fill, Stroke, Style, Circle, Text} from "ol/style";
    import {interpolateRgbBasis} from 'd3-interpolate';
    import {Chart, PieController, ArcElement, Legend, Tooltip} from "chart.js";
    import Feature from "ol/Feature";
    import {Point} from "ol/geom";
    import {getCenter} from "ol/extent";

    Chart.register([PieController, ArcElement, Legend, Tooltip]);

    proj4.defs("EPSG:2154","+proj=lcc +lat_0=46.5 +lon_0=3 +lat_1=49 +lat_2=44 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs +type=crs");
    register(proj4);

    var state = {
        indicator: 'evolution',
        region: null,
        departementsForRegion: [] as string[],
        departement: null,
        metier: null
    };

    loadMap();
    async function loadMap() {
        // data
        const [departements, metiers, bmo2024, bmo2025] = await Promise.all([
            fetch('/data/intentions-embauche-2025/departements.json').then(res => res.json()),
            fetch('/data/intentions-embauche-2025/metiers.json').then(res => res.json()),
            fetch('/data/intentions-embauche-2025/bmo_2024_dept.json').then(res => res.json()),
            fetch('/data/intentions-embauche-2025/bmo_2025_dept.json').then(res => res.json())]
        );

        const regionsSource = new VectorSource({
            url: '/data/intentions-embauche-2025/regions.json',
            format: new GeoJSON(),
        });
        const departementsSource = new VectorSource({
            url: '/data/intentions-embauche-2025/departements-features.json',
            format: new GeoJSON(),
        });

        const colorPalette = ["#fff7ec","#feebcf","#fddcaf","#fdca94","#fdb07a","#fa8e5d","#f16c49","#e04530","#c81d13","#a70403","#7f0000"];
        const frenchNumberFormat = new Intl.NumberFormat('fr-FR');
        const frenchPercentFormat = new Intl.NumberFormat('fr-FR', {style: 'percent'});

        function getRegionFeatureStyle (feature) {
            if (!state.region) {
                let value = getCurrentValue(feature.get('code'), state.departement, state.metier);

                if (state.indicator === 'value') {
                    return [
                        new Style({
                            fill: new Fill({
                                color: '#eee',
                            }),
                            stroke: new Stroke({
                                color: 'black'
                            }),
                        }),
                        new Style({
                            geometry: new Point(getCenter(feature.getGeometry().getExtent())),
                            image: new Circle({
                                radius: value[state.indicator] / 5000,
                                fill: new Fill({
                                    color: "#0d2d55"
                                }),
                                stroke: new Stroke({
                                    color: 'black',
                                    width: 1
                                })
                            }),
                            text: new Text({
                                font: (value[state.indicator]  / 10000) + 'px "Source Serif 4"',
                                text: frenchNumberFormat.format(value[state.indicator]),
                                fill: new Fill({
                                    color: 'white'
                                })
                            })
                        })]
                } else {
                    return [
                        new Style({
                            fill: new Fill({
                                color: interpolateRgbBasis(colorPalette)(Math.abs(value[state.indicator]) / 0.4),
                            }),
                            stroke: new Stroke({
                                color: 'black',
                            })
                        }),
                        new Style({
                            geometry: new Point(getCenter(feature.getGeometry().getExtent())),
                            text: new Text({
                                text: [
                                    feature.get('nom'), '500 1em "Source Serif 4"',
                                    '\n', '',
                                    frenchPercentFormat.format(value[state.indicator]), '1em "Source Serif 4"',
                                ],
                                fill: new Fill({
                                    color: 'black'
                                })
                            })
                        }),
                    ]
                }
            }

            return new Style({
                fill: new Fill({
                    color: '#eee',
                }),
                stroke: new Stroke({
                    color: 'black',
                    width: !state.departement && state.region === feature.get('code') ? 3 : 1
                }),
            });
        }

        const regionsLayer = new VectorLayer({
            source: regionsSource,
            style: getRegionFeatureStyle
        });

        function getDepartementFeatureStyle(feature) {
            if (state.region && state.departementsForRegion.includes(feature.get('code'))) {
                let value = getCurrentValue(state.region, feature.get('code'), state.metier);

                if (state.indicator === 'value') {
                    return [
                        new Style({
                            fill: new Fill({
                                color: '#eee',
                            }),
                            stroke: new Stroke({
                                color: 'black',
                                width: state.departement === feature.get('code') ? 3 : 1
                            }),
                        }),
                        new Style({
                            geometry: new Point(getCenter(feature.getGeometry().getExtent())),
                            image: new Circle({
                                radius: value[state.indicator] / 800,
                                fill: new Fill({
                                    color: "#0d2d55"
                                }),
                                stroke: new Stroke({
                                    color: 'black',
                                    width: 1
                                })
                            }),
                            text: new Text({
                                font: (value[state.indicator]  / 1500) + 'px "Source Serif 4"',
                                text: frenchNumberFormat.format(value[state.indicator]),
                                fill: new Fill({
                                    color: 'white'
                                })
                            }),
                        })]
                } else {
                    return new Style({
                        fill: new Fill({
                            color: interpolateRgbBasis(colorPalette)(Math.abs(value[state.indicator]) / 0.4),
                        }),
                        stroke: new Stroke({
                            color: 'black',
                            width: state.departement === feature.get('code') ? 3 : 1
                        }),
                        text: new Text({
                            text: [
                                feature.get('nom'), '500 1em "Source Serif 4"',
                                '\n', '',
                                frenchPercentFormat.format(value[state.indicator]), '1em "Source Serif 4"',
                            ],
                            fill: new Fill({
                                color: 'black'
                            })
                        })
                    });
                }
            }
            return new Style({});
        }

        const departementsLayer = new VectorLayer({
            source: departementsSource,
            style: getDepartementFeatureStyle
        });

        const map = new Map({
            target: 'map',
            layers: [
                regionsLayer,
                departementsLayer
            ],
            view: new View({
                center: [0, 0],
                zoom: 0,
            }),
        });

        regionsSource.on('featuresloadend', function() {
            map.getView().fit(regionsSource.getExtent(), {padding: [10, 10, 75, 10]});
        });

        // data access
        function getCurrentValue(region: string | null, departement: string | null, metier: string | null) {
            let data2025 = filterData(bmo2025, region, departement, metier).reduce((sum, entry) => sum + entry[2], 0);
            let data2024 = filterData(bmo2024, region, departement, metier).reduce((sum, entry) => sum + entry[2], 0);

            return {
                oldValue: data2024,
                value: data2025,
                evolution: (data2025 - data2024) / data2024
            }
        }

        function filterData(data: any[], region: string | null, departement: string | null, metier: string | null): any[] {
            let regionDepartements = getRegionDepartements(region);
            return data.filter(entry =>
                (metier != null ? entry[0] === metier : true) &&
                (departement != null ? entry[1] === departement : true) &&
                (region != null ? regionDepartements.includes(entry[1]) : true)
            );
        }

        function getRegionDepartements(region: string | null) {
            if (region === null) return [];
            return departements.filter((entry: any) => (entry.REG) === region).map((entry: any) => entry.DEP);
        }

        function getMetierRepartition(region: string | null, departement: string | null, metier: string | null) {
            let groupBy = function(xs, key) {
                return xs.reduce(function(rv, x) {
                    (rv[x[key]] ??= []).push(x);
                    return rv;
                }, {});
            };

            let data = filterData(bmo2025, region, departement, metier);
            let groupedData = groupBy(data, 0);
            let total = 0;
            for (let metier of Object.keys(groupedData)) {
                groupedData[metier] = groupedData[metier].reduce((sum, entry) => sum + entry[2], 0);
                total += groupedData[metier];
            }

            let topTenKeys = Object.keys(groupedData).sort((a, b) => groupedData[b] - groupedData[a]).slice(0, 9);

            let topTenLabels = [...topTenKeys.map(key => metiers[key].label), 'Autres'];
            let topTenValues = [...topTenKeys.map(key => groupedData[key]), total - topTenKeys.reduce((sum, key) => sum + groupedData[key], 0)];

            return {
                labels: topTenLabels,
                values: topTenValues
            }
        }

        // chart
        let repartition = getMetierRepartition(null, null, null);
        const ctx = document.getElementById('metier-chart');
        const metierChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: repartition.labels,
                datasets: [{
                    data: repartition.values,
                    backgroundColor: [
                        "#4269d0","#efb118","#ff725c","#6cc5b0","#3ca951","#ff8ab7","#a463f2","#97bbf5","#9c6b4e","#bbb"
                    ],
                    hoverOffset: 4
                }]
            },
            options: {
                plugins: {
                    legend: {
                        position: 'bottom',
                        align: 'start',
                        labels: {
                            color: 'black',
                            font: {
                                size: 12,
                                family: '"Source Serif 4"'
                            }
                        }
                    }
                },
            }
        });

        // interactions
        window.selectIndicator = function (indicator: string) {
            if (indicator === 'Nombre de projets') {
                state.indicator = 'value';
            } else {
                state.indicator = 'evolution';
            }
            regionsSource.changed();
            departementsSource.changed();
        }

        let tooltipElem = document.getElementById('tooltip');
        let featureNameElem = document.getElementById('feature-name');
        let projectAmountElem = document.getElementById('project-amount');

        let hoveredRegion: Feature | null = null;
        let hoveredDepartement: Feature | null = null;
        map.on('pointermove', function (evt) {
            if (hoveredRegion) {
                map.getTargetElement().style.cursor = 'auto';
                hoveredRegion.setStyle(undefined);
                hoveredRegion = null;
            }

            if (hoveredDepartement) {
                map.getTargetElement().style.cursor = 'auto';
                hoveredDepartement.setStyle(undefined);
                hoveredDepartement = null;
            }

            map.forEachFeatureAtPixel(evt.pixel, function (feature: Feature) {
                map.getTargetElement().style.cursor = 'pointer';
                hoveredRegion = feature;

                if (feature.get('code') !== state.region || !state.departement) {
                    let featureStyle: Style = getRegionFeatureStyle(feature);
                    if (featureStyle.length > 0) {
                        featureStyle[0].getStroke()?.setWidth(3);
                    } else {
                        featureStyle.getStroke()?.setWidth(3);
                    }
                    feature.setStyle(featureStyle);
                }

                return true;
            }, {
                layerFilter: (layer) => layer === regionsLayer
            });

            map.forEachFeatureAtPixel(evt.pixel, function (feature: Feature) {
                map.getTargetElement().style.cursor = 'pointer';
                hoveredDepartement = feature;

                let featureStyle: Style = getDepartementFeatureStyle(feature);
                if (featureStyle.length > 0) {
                    featureStyle[0].getStroke()?.setWidth(3);
                } else {
                    featureStyle.getStroke()?.setWidth(3);
                }
                feature.setStyle(featureStyle);

                return true;
            }, {
                layerFilter: (layer) => layer === departementsLayer
            });

            if ((hoveredRegion || hoveredDepartement) && state.indicator === 'value') {
                tooltipElem.style.left = evt.pixel[0] + 10 + 'px';
                tooltipElem.style.top = evt.pixel[1] + 10 + 'px';

                let hoveredFeature = hoveredDepartement || hoveredRegion;
                if (hoveredFeature.getStyle()[1]?.getText().getText()) {
                    featureNameElem.innerText = hoveredFeature.get('nom')
                    projectAmountElem.innerText = hoveredFeature.getStyle()[1]?.getText().getText();
                    tooltipElem.style.display = 'block';
                }
            } else {
                tooltipElem.style.display = 'none';
            }
        });

        map.on('click', function (evt) {
            let regionFeature = map.getFeaturesAtPixel(evt.pixel, {
                layerFilter: (layer) => layer === regionsLayer
            }).pop();

            if (regionFeature) {
                state.region = regionFeature.get('code');
                state.departementsForRegion = getRegionDepartements(state.region);
                state.departement = null;

                regionFeature.changed();
                departementsSource.changed();
                map.getView().fit(regionFeature.getGeometry(), { padding: [10, 10, 10, 10] });

                updateData('Région ' + regionFeature.get('nom'), 'Dans la région ' + regionFeature.get('nom'),)
            }

            let departementFeature = map.getFeaturesAtPixel(evt.pixel, {
                layerFilter: (layer) => layer === departementsLayer
            }).pop();

            if (departementFeature) {
                state.departement = departementFeature.get('code');

                departementFeature.changed();

                updateData('Département ' + departementFeature.get('nom'), 'Dans le département ' + departementFeature.get('nom'),)
            }
        });

        function updateData(title, geolocation) {
            let data = getCurrentValue(state.region, state.departement, state.metier);
            window.dispatchEvent(new CustomEvent('update-data', {
                detail: {
                    title,
                    geolocation,
                    evolution: data.evolution,
                    projets2024: data.oldValue,
                    projets2025: data.value,
                }
            }));

            let repartition = getMetierRepartition(state.region, state.departement, state.metier);
            metierChart.data.datasets[0].data = repartition.values;
            metierChart.data.labels = repartition.labels;
            metierChart.update();
        }

        // side panel interactions
        window.goBack = function() {
            if (state.departement) {
                let departementRegion = departements.find(elem => elem.DEP === state.departement).REG;
                let regionFeature = regionsSource.getFeatures().find(feature => feature.get('code') === departementRegion);

                state.departement = null;

                updateData('Région ' + regionFeature.get('nom'), 'Dans la région ' + regionFeature.get('nom'));

                departementsSource.changed();
                regionsSource.changed();

                map.getView().fit(regionFeature?.getGeometry(), {padding: [10, 10, 10, 10]});
            } else if (state.region) {
                state.region = null;
                state.departement = null;

                updateData('France métropolitaine', "A l'échelle nationale");

                regionsSource.forEachFeature((feature) => {
                    feature.setStyle(undefined);
                });

                regionsSource.changed();
                map.getView().fit(regionsSource.getExtent(), {padding: [10, 10, 75, 10]});
            }
        }
    }
</script>
